// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  assignedCards Card[]
  createdCards  Card[] @relation("CardCreator")
  cardLogs      CardLog[]

  @@map("users")
}

model Board {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  columns Column[]

  @@map("boards")
}

model Column {
  id       String @id @default(uuid())
  title    String
  position Int
  boardId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]

  @@map("columns")
}

model Card {
  id          String    @id @default(uuid())
  title       String
  description String?
  priority    Priority  @default(MEDIUM)
  position    Int
  columnId    String
  assigneeId  String?
  creatorId   String
  dueDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee User?     @relation(fields: [assigneeId], references: [id])
  creator  User      @relation("CardCreator", fields: [creatorId], references: [id])
  logs     CardLog[]
  attachments CardAttachment[]

  @@map("cards")
}

model CardAttachment {
  id       String @id @default(uuid())
  filename String
  fileUrl  String
  fileSize Int
  mimeType String
  cardId   String

  createdAt DateTime @default(now())


  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_attachments")
}

model CardLog {
  id       String    @id @default(uuid())
  action   LogAction
  details  String?
  userId   String
  cardId   String

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("card_logs")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum LogAction {
  CREATED
  UPDATED
  MOVED
  ASSIGNED
  UNASSIGNED
  DELETED
}